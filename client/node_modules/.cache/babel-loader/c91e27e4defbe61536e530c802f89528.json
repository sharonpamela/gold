{"ast":null,"code":"'use strict';\n/* global fetch */\n\nvar baseUrl = 'https://min-api.cryptocompare.com/data/';\n\nfunction fetchJSON(url) {\n  return fetch(url).then(function (res) {\n    if (!res.ok) {\n      throw new Error(\"\".concat(res.status, \" \").concat(res.statusText));\n    }\n\n    return res.json();\n  }).then(function (body) {\n    if (body.Response === 'Error') throw body.Message;\n    return body;\n  });\n}\n\nfunction coinList() {\n  var url = \"\".concat(baseUrl, \"all/coinlist\");\n  return fetchJSON(url);\n}\n\nfunction exchangeList() {\n  var url = \"\".concat(baseUrl, \"all/exchanges\");\n  return fetchJSON(url);\n}\n\nfunction price(fsym, tsyms, options) {\n  options = options || {};\n  var url = \"\".concat(baseUrl, \"price?fsym=\").concat(fsym, \"&tsyms=\").concat(tsyms);\n  if (options.exchanges) url += \"&e=\".concat(options.exchanges);\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  return fetchJSON(url);\n}\n\nfunction priceMulti(fsyms, tsyms, options) {\n  options = options || {};\n  var url = \"\".concat(baseUrl, \"pricemulti?fsyms=\").concat(fsyms, \"&tsyms=\").concat(tsyms);\n  if (options.exchanges) url += \"&e=\".concat(options.exchanges);\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  return fetchJSON(url);\n}\n\nfunction priceFull(fsyms, tsyms, options) {\n  options = options || {};\n  var url = \"\".concat(baseUrl, \"pricemultifull?fsyms=\").concat(fsyms, \"&tsyms=\").concat(tsyms);\n  if (options.exchanges) url += \"&e=\".concat(options.exchanges);\n  if (options.tryConversion === false) url += '&tryConversion=false'; // We want the RAW data, not the DISPLAY data:\n\n  return fetchJSON(url).then(function (result) {\n    return result.RAW;\n  });\n}\n\nfunction priceHistorical(fsym, tsyms, time, options) {\n  options = options || {};\n  time = dateToTimestamp(time);\n  var url = \"\".concat(baseUrl, \"pricehistorical?fsym=\").concat(fsym, \"&tsyms=\").concat(tsyms, \"&ts=\").concat(time);\n  if (options.exchanges) url += \"&e=\".concat(options.exchanges);\n  if (options.tryConversion === false) url += '&tryConversion=false'; // The API returns json with an extra layer of nesting, so remove it\n\n  return fetchJSON(url).then(function (result) {\n    return result[fsym];\n  });\n}\n\nfunction generateAvg(fsym, tsym, e, tryConversion) {\n  var url = \"\".concat(baseUrl, \"generateAvg?fsym=\").concat(fsym, \"&tsym=\").concat(tsym, \"&e=\").concat(e);\n  if (tryConversion === false) url += '&tryConversion=false';\n  return fetchJSON(url).then(function (result) {\n    return result.RAW;\n  });\n}\n\nfunction topPairs(fsym, limit) {\n  var url = \"\".concat(baseUrl, \"top/pairs?fsym=\").concat(fsym);\n  if (limit) url += \"&limit=\".concat(limit);\n  return fetchJSON(url).then(function (result) {\n    return result.Data;\n  });\n}\n\nfunction topExchanges(fsym, tsym, limit) {\n  var url = \"\".concat(baseUrl, \"top/exchanges?fsym=\").concat(fsym, \"&tsym=\").concat(tsym);\n  if (limit) url += \"&limit=\".concat(limit);\n  return fetchJSON(url).then(function (result) {\n    return result.Data;\n  });\n}\n\nfunction histoDay(fsym, tsym, options) {\n  options = options || {};\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp);\n  var url = \"\".concat(baseUrl, \"histoday?fsym=\").concat(fsym, \"&tsym=\").concat(tsym);\n  if (options.exchange) url += \"&e=\".concat(options.exchange);\n  if (options.limit === 'none') url += '&allData=true';else if (options.limit) url += \"&limit=\".concat(options.limit);\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  if (options.aggregate) url += \"&aggregate=\".concat(options.aggregate);\n  if (options.timestamp) url += \"&toTs=\".concat(options.timestamp);\n  return fetchJSON(url).then(function (result) {\n    return result.Data;\n  });\n}\n\nfunction histoHour(fsym, tsym, options) {\n  options = options || {};\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp);\n  var url = \"\".concat(baseUrl, \"histohour?fsym=\").concat(fsym, \"&tsym=\").concat(tsym);\n  if (options.exchange) url += \"&e=\".concat(options.exchange);\n  if (options.limit) url += \"&limit=\".concat(options.limit);\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  if (options.aggregate) url += \"&aggregate=\".concat(options.aggregate);\n  if (options.timestamp) url += \"&toTs=\".concat(options.timestamp);\n  return fetchJSON(url).then(function (result) {\n    return result.Data;\n  });\n}\n\nfunction histoMinute(fsym, tsym, options) {\n  options = options || {};\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp);\n  var url = \"\".concat(baseUrl, \"histominute?fsym=\").concat(fsym, \"&tsym=\").concat(tsym);\n  if (options.exchange) url += \"&e=\".concat(options.exchange);\n  if (options.limit) url += \"&limit=\".concat(options.limit);\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  if (options.aggregate) url += \"&aggregate=\".concat(options.aggregate);\n  if (options.timestamp) url += \"&toTs=\".concat(options.timestamp);\n  return fetchJSON(url).then(function (result) {\n    return result.Data;\n  });\n}\n\nfunction dateToTimestamp(date) {\n  if (!(date instanceof Date)) throw new Error('timestamp must be an instance of Date.');\n  return Math.floor(date.getTime() / 1000);\n}\n\nmodule.exports = {\n  coinList: coinList,\n  exchangeList: exchangeList,\n  price: price,\n  priceMulti: priceMulti,\n  priceFull: priceFull,\n  priceHistorical: priceHistorical,\n  generateAvg: generateAvg,\n  topPairs: topPairs,\n  topExchanges: topExchanges,\n  histoDay: histoDay,\n  histoHour: histoHour,\n  histoMinute: histoMinute\n};","map":null,"metadata":{},"sourceType":"script"}