{"ast":null,"code":"import _objectSpread from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/santana/Desktop/my-repos/projects/gold/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/santana/Desktop/my-repos/projects/gold/client/src/App/AppProvider.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport API from \"../utils/API\";\n\nvar cc = require('cryptocompare');\n\nexport var AppContext = React.createContext();\nvar MAX_FAVORITES = 10; // max num of fav tiles displayed\n\nvar TIME_UNITS = 10; // data pts for the graph\n\nexport var AppProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppProvider, _React$Component);\n\n  function AppProvider(props) {\n    var _this;\n\n    _classCallCheck(this, AppProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AppProvider).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.fetchCoins();\n\n      _this.fetchPrices();\n\n      _this.fetchHistorical();\n    };\n\n    _this.fetchCoins =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var coinList;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return cc.coinList();\n\n            case 2:\n              coinList = _context.sent.Data;\n\n              //fetches ALL avail coins from CC\n              _this.setState({\n                coinList: coinList\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.fetchPrices =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var prices;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!_this.state.firstVisit) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              _context2.next = 4;\n              return _this.prices();\n\n            case 4:\n              prices = _context2.sent;\n\n              _this.setState({\n                prices: prices\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.fetchHistorical =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var results, historical;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!_this.state.firstVisit) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              _context3.next = 4;\n              return _this.historical();\n\n            case 4:\n              results = _context3.sent;\n              historical = [{\n                name: _this.state.currentFavorite,\n                data: results.map(function (ticker, index) {\n                  return [moment().subtract(_defineProperty({}, _this.state.timeInterval, TIME_UNITS - index)).valueOf(), ticker.USD];\n                })\n              }];\n\n              _this.setState({\n                historical: historical\n              });\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.prices =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var returnData, i, priceData;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              returnData = [];\n              i = 0;\n\n            case 2:\n              if (!(i < _this.state.favorites.length)) {\n                _context4.next = 16;\n                break;\n              }\n\n              _context4.prev = 3;\n              _context4.next = 6;\n              return cc.priceFull(_this.state.favorites[i], 'USD');\n\n            case 6:\n              priceData = _context4.sent;\n              returnData.push(priceData);\n              _context4.next = 13;\n              break;\n\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](3);\n              console.warn('Fetch price error: ', _context4.t0);\n\n            case 13:\n              i++;\n              _context4.next = 2;\n              break;\n\n            case 16:\n              return _context4.abrupt(\"return\", returnData);\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[3, 10]]);\n    }));\n\n    _this.historical = function () {\n      var promises = [];\n\n      for (var units = TIME_UNITS; units > 0; units--) {\n        promises.push(cc.priceHistorical(_this.state.currentFavorite, ['USD'], moment().subtract(_defineProperty({}, _this.state.timeInterval, units)).toDate()));\n      }\n\n      return Promise.all(promises);\n    };\n\n    _this.addCoin =\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(key) {\n        var favorites;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                favorites = _toConsumableArray(_this.state.favorites);\n\n                if (!(favorites.length < MAX_FAVORITES)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                favorites.push(key); // update the curr state \n\n                _this.setState({\n                  favorites: favorites\n                }); // update db with curr state\n\n\n                try {} catch (e) {\n                  console.log(\"Saving Favorites into DB: \", err);\n                }\n\n                _context5.next = 7;\n                return API.saveUser({\n                  favorites: _this.state.favorites\n                });\n\n              case 7:\n                res = _context5.sent;\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    _this.removeCoin = function (key) {\n      var favorites = _toConsumableArray(_this.state.favorites);\n\n      _this.setState({\n        favorites: _.pull(favorites, key)\n      });\n    };\n\n    _this.isInFavorites = function (key) {\n      return _.includes(_this.state.favorites, key);\n    };\n\n    _this.confirmFavorites = function () {\n      var currentFavorite = _this.state.favorites[0];\n\n      _this.setState({\n        firstVisit: false,\n        page: 'dashboard',\n        currentFavorite: currentFavorite,\n        prices: null,\n        historical: null\n      }, function () {\n        _this.fetchPrices();\n\n        _this.fetchHistorical();\n      });\n\n      localStorage.setItem('cryptoDash', JSON.stringify({\n        favorites: _this.state.favorites,\n        currentFavorite: currentFavorite\n      }));\n    };\n\n    _this.setCurrentFavorite = function (sym) {\n      _this.setState({\n        currentFavorite: sym,\n        historical: null\n      }, _this.fetchHistorical);\n\n      localStorage.setItem('cryptoDash', JSON.stringify(_objectSpread({}, JSON.parse(localStorage.getItem('cryptoDash')), {\n        currentFavorite: sym\n      })));\n    };\n\n    _this.setPage = function (page) {\n      return _this.setState({\n        page: page\n      });\n    };\n\n    _this.setFilteredCoins = function (filteredCoins) {\n      return _this.setState({\n        filteredCoins: filteredCoins\n      });\n    };\n\n    _this.changeChartSelect = function (value) {\n      _this.setState({\n        timeInterval: value,\n        historical: null\n      }, _this.fetchHistorical);\n    };\n\n    _this.state = _objectSpread({\n      page: 'dashboard',\n      favorites: ['BTC', 'ETH', 'XMR', 'DOGE'],\n      timeInterval: 'months'\n    }, _this.savedSettings(), {\n      // when called will spread results over prev props\n      setPage: _this.setPage,\n      // this determines which page content to display (settings or dash)\n      addCoin: _this.addCoin,\n      removeCoin: _this.removeCoin,\n      isInFavorites: _this.isInFavorites,\n      confirmFavorites: _this.confirmFavorites,\n      setCurrentFavorite: _this.setCurrentFavorite,\n      setFilteredCoins: _this.setFilteredCoins,\n      changeChartSelect: _this.changeChartSelect\n    });\n    return _this;\n  }\n\n  _createClass(AppProvider, [{\n    key: \"savedSettings\",\n    value: function savedSettings() {\n      var cryptoDashData = JSON.parse(localStorage.getItem('cryptoDash'));\n\n      if (!cryptoDashData) {\n        return {\n          page: 'settings',\n          firstVisit: true\n        };\n      }\n\n      var favorites = cryptoDashData.favorites,\n          currentFavorite = cryptoDashData.currentFavorite;\n      return {\n        favorites: favorites,\n        currentFavorite: currentFavorite\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(AppContext.Provider, {\n        value: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return AppProvider;\n}(React.Component);","map":{"version":3,"sources":["/Users/santana/Desktop/my-repos/projects/gold/client/src/App/AppProvider.js"],"names":["React","_","moment","API","cc","require","AppContext","createContext","MAX_FAVORITES","TIME_UNITS","AppProvider","props","componentDidMount","fetchCoins","fetchPrices","fetchHistorical","coinList","Data","setState","state","firstVisit","prices","historical","results","name","currentFavorite","data","map","ticker","index","subtract","timeInterval","valueOf","USD","returnData","i","favorites","length","priceFull","priceData","push","console","warn","promises","units","priceHistorical","toDate","Promise","all","addCoin","key","e","log","err","saveUser","res","removeCoin","pull","isInFavorites","includes","confirmFavorites","page","localStorage","setItem","JSON","stringify","setCurrentFavorite","sym","parse","getItem","setPage","setFilteredCoins","filteredCoins","changeChartSelect","value","savedSettings","cryptoDashData","children","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport API from \"../utils/API\";\n\nconst cc = require('cryptocompare');\n\nexport const AppContext = React.createContext();\n\nconst MAX_FAVORITES = 10; // max num of fav tiles displayed\nconst TIME_UNITS = 10; // data pts for the graph\n\nexport class AppProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 'dashboard',\n      favorites: ['BTC', 'ETH', 'XMR', 'DOGE'],\n      timeInterval: 'months',\n      ...this.savedSettings(), // when called will spread results over prev props\n      setPage: this.setPage, // this determines which page content to display (settings or dash)\n      addCoin: this.addCoin,\n      removeCoin: this.removeCoin,\n      isInFavorites: this.isInFavorites,\n      confirmFavorites: this.confirmFavorites,\n      setCurrentFavorite: this.setCurrentFavorite,\n      setFilteredCoins: this.setFilteredCoins,\n      changeChartSelect: this.changeChartSelect\n    }\n  }\n\n  componentDidMount = () => {\n    this.fetchCoins();\n    this.fetchPrices();\n    this.fetchHistorical();\n  }\n\n  fetchCoins = async () => {\n    let coinList = (await cc.coinList()).Data;//fetches ALL avail coins from CC\n    this.setState({ coinList });\n  }\n\n  fetchPrices = async () => {\n    if (this.state.firstVisit) return;\n    let prices = await this.prices();\n    this.setState({ prices });\n  }\n\n  fetchHistorical = async () => {\n    if (this.state.firstVisit) return;\n    let results = await this.historical();\n    let historical = [\n      {\n        name: this.state.currentFavorite,\n        data: results.map((ticker, index) => [\n          moment().subtract({ [this.state.timeInterval]: TIME_UNITS - index }).valueOf(),\n          ticker.USD\n        ])\n      }\n    ]\n    this.setState({ historical });\n  }\n\n  prices = async () => {\n    let returnData = [];\n    for (let i = 0; i < this.state.favorites.length; i++) {\n      try {\n        let priceData = await cc.priceFull(this.state.favorites[i], 'USD');\n        returnData.push(priceData);\n      } catch (e) {\n        console.warn('Fetch price error: ', e);\n      }\n    }\n    return returnData;\n  }\n\n  historical = () => {\n    let promises = [];\n    for (let units = TIME_UNITS; units > 0; units--) {\n      promises.push(\n        cc.priceHistorical(\n          this.state.currentFavorite,\n          ['USD'],\n          moment()\n            .subtract({ [this.state.timeInterval]: units })\n            .toDate()\n        )\n      )\n    }\n    return Promise.all(promises);\n  }\n\n  addCoin = async key => {\n    let favorites = [...this.state.favorites];\n    if (favorites.length < MAX_FAVORITES) {\n      favorites.push(key);\n      // update the curr state \n      this.setState({ favorites });\n      // update db with curr state\n      try {\n\n      }catch (e){\n        console.log(\"Saving Favorites into DB: \", err)\n      }\n      res = await API.saveUser({\n        favorites: this.state.favorites\n      });\n      \n    }\n}\n\nremoveCoin = key => {\n  let favorites = [...this.state.favorites];\n  this.setState({ favorites: _.pull(favorites, key) })\n}\n\nisInFavorites = key => _.includes(this.state.favorites, key)\n\nconfirmFavorites = () => {\n  let currentFavorite = this.state.favorites[0];\n  this.setState({\n    firstVisit: false,\n    page: 'dashboard',\n    currentFavorite,\n    prices: null,\n    historical: null\n  }, () => {\n    this.fetchPrices();\n    this.fetchHistorical();\n  });\n  localStorage.setItem('cryptoDash', JSON.stringify({\n    favorites: this.state.favorites,\n    currentFavorite\n  }));\n}\n\nsetCurrentFavorite = (sym) => {\n  this.setState({\n    currentFavorite: sym,\n    historical: null\n  }, this.fetchHistorical);\n\n  localStorage.setItem('cryptoDash', JSON.stringify({\n    ...JSON.parse(localStorage.getItem('cryptoDash')),\n    currentFavorite: sym\n  }))\n}\n\nsavedSettings(){\n  let cryptoDashData = JSON.parse(localStorage.getItem('cryptoDash'));\n  if (!cryptoDashData) {\n    return { page: 'settings', firstVisit: true }\n  }\n  let { favorites, currentFavorite } = cryptoDashData;\n  return { favorites, currentFavorite };\n}\n\nsetPage = page => this.setState({ page })\n\nsetFilteredCoins = (filteredCoins) => this.setState({ filteredCoins })\n\nchangeChartSelect = (value) => {\n  this.setState({ timeInterval: value, historical: null }, this.fetchHistorical);\n}\n\nrender(){\n  return (\n    <AppContext.Provider value={this.state}>\n      {this.props.children}\n    </AppContext.Provider>\n  )\n}\n\n}\n"]},"metadata":{},"sourceType":"module"}